[INFO] Starting full deployment and monitoring verification...
[INFO] Running terraform init...
[0m[1mInitializing the backend...[0m
[31mâ•·[0m[0m
[31mâ”‚[0m [0m[1m[31mError: [0m[0m[1m[0mTerraform encountered problems during initialisation, including problems
[31mâ”‚[0m [0mwith the configuration, described below.
[31mâ”‚[0m [0m
[31mâ”‚[0m [0mThe Terraform configuration must be valid before initialization so that
[31mâ”‚[0m [0mTerraform can determine which modules and providers need to be installed.[0m[0m
[31mâ”‚[0m [0m
[31mâ”‚[0m [0m[0m
[31mâ•µ[0m[0m
[31mâ•·[0m[0m
[31mâ”‚[0m [0m[1m[31mError: [0m[0m[1mDuplicate variable declaration[0m
[31mâ”‚[0m [0m
[31mâ”‚[0m [0m[0m  on variables.tf line 1:
[31mâ”‚[0m [0m   1: [4mvariable "eks_oidc_provider_url"[0m {[0m
[31mâ”‚[0m [0m
[31mâ”‚[0m [0mA variable named "eks_oidc_provider_url" was already declared at
[31mâ”‚[0m [0mmain.tf:105,1-33. Variable names must be unique within a module.
[31mâ•µ[0m[0m
[31mâ•·[0m[0m
[31mâ”‚[0m [0m[1m[31mError: [0m[0m[1mDuplicate variable declaration[0m
[31mâ”‚[0m [0m
[31mâ”‚[0m [0m[0m  on variables.tf line 1:
[31mâ”‚[0m [0m   1: [4mvariable "eks_oidc_provider_url"[0m {[0m
[31mâ”‚[0m [0m
[31mâ”‚[0m [0mA variable named "eks_oidc_provider_url" was already declared at
[31mâ”‚[0m [0mmain.tf:105,1-33. Variable names must be unique within a module.
[31mâ•µ[0m[0m
[31mâ•·[0m[0m
[31mâ”‚[0m [0m[1m[31mError: [0m[0m[1mDuplicate variable declaration[0m
[31mâ”‚[0m [0m
[31mâ”‚[0m [0m[0m  on variables.tf line 6:
[31mâ”‚[0m [0m   6: [4mvariable "eks_oidc_provider_arn"[0m {[0m
[31mâ”‚[0m [0m
[31mâ”‚[0m [0mA variable named "eks_oidc_provider_arn" was already declared at
[31mâ”‚[0m [0mmain.tf:104,1-33. Variable names must be unique within a module.
[31mâ•µ[0m[0m
[31mâ•·[0m[0m
[31mâ”‚[0m [0m[1m[31mError: [0m[0m[1mDuplicate variable declaration[0m
[31mâ”‚[0m [0m
[31mâ”‚[0m [0m[0m  on variables.tf line 6:
[31mâ”‚[0m [0m   6: [4mvariable "eks_oidc_provider_arn"[0m {[0m
[31mâ”‚[0m [0m
[31mâ”‚[0m [0mA variable named "eks_oidc_provider_arn" was already declared at
[31mâ”‚[0m [0mmain.tf:104,1-33. Variable names must be unique within a module.
[31mâ•µ[0m[0m
[INFO] Starting full deployment and monitoring verification...
[INFO] Running terraform init...
[0m[1mInitializing the backend...[0m
[0m[1mInitializing provider plugins...[0m
- Reusing previous version of hashicorp/archive from the dependency lock file
- Reusing previous version of hashicorp/aws from the dependency lock file
- Reusing previous version of hashicorp/random from the dependency lock file
- Using previously-installed hashicorp/archive v2.7.1
- Using previously-installed hashicorp/aws v6.0.0
- Using previously-installed hashicorp/random v3.7.2

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
[INFO] Running terraform plan...
[0m[1mvar.eks_oidc_provider_arn[0m
  EKS OIDC provider ARN

  [1mEnter a value:[0m [0m[INFO] Starting full deployment and monitoring verification...
[INFO] OIDC Provider URL: https://oidc.eks.us-west-2.amazonaws.com/id/C0F23AD6C61A174278A5A674648A08A4
[INFO] Listing OIDC provider ARNs...
[INFO] OIDC Provider ARNs: arn:aws:iam::207567767039:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/C0F23AD6C61A174278A5A674648A08A4	arn:aws:iam::207567767039:oidc-provider/token.actions.githubusercontent.com
[INFO] Running terraform init...
[0m[1mInitializing the backend...[0m
[0m[1mInitializing provider plugins...[0m
- Reusing previous version of hashicorp/aws from the dependency lock file
- Reusing previous version of hashicorp/random from the dependency lock file
- Reusing previous version of hashicorp/archive from the dependency lock file
- Using previously-installed hashicorp/aws v6.0.0
- Using previously-installed hashicorp/random v3.7.2
- Using previously-installed hashicorp/archive v2.7.1

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
[INFO] Running terraform plan...
[0m[1mvar.eks_oidc_provider_arn[0m
  EKS OIDC provider ARN

  [1mEnter a value:[0m [0m
[0m[1mvar.eks_oidc_provider_url[0m
  EKS OIDC provider URL

  [1mEnter a value:[0m [0m
[0m[1mrandom_password.db_password: Refreshing state... [id=none][0m
[0m[1mdata.archive_file.sns_to_slack_lambda_zip: Reading...[0m[0m
[0m[1mdata.archive_file.sns_to_slack_lambda_zip: Read complete after 0s [id=3491934356510047cd083383ceccc26cbca46ce7][0m
[0m[1mdata.aws_iam_policy_document.irsa: Reading...[0m[0m
[0m[1maws_cloudwatch_log_group.scraper: Refreshing state... [id=/aws/cc-nevada-permit-scraper/prod][0m
[0m[1mdata.aws_vpc.default: Reading...[0m[0m
[0m[1maws_secretsmanager_secret.db: Refreshing state... [id=arn:aws:secretsmanager:us-west-2:207567767039:secret:cc-nevada-permit-db-prod-Y2BBDG][0m
[0m[1maws_sns_topic.alerts: Refreshing state... [id=arn:aws:sns:us-west-2:207567767039:cc-nevada-permit-alerts-prod][0m
[0m[1mdata.aws_iam_policy_document.irsa: Read complete after 0s [id=3845415488][0m
[0m[1maws_s3_bucket.export: Refreshing state... [id=cc-nevada-permit-export-prod][0m
[0m[1maws_iam_role.scraper: Refreshing state... [id=cc-nevada-permit-irsa-prod][0m
[0m[1maws_cloudwatch_metric_alarm.scrape_failure: Refreshing state... [id=cc-nevada-permit-scrape-failure-prod][0m
[0m[1maws_cloudwatch_metric_alarm.scrape_error_count: Refreshing state... [id=cc-nevada-permit-scrape-error-high-prod][0m
[0m[1mdata.aws_vpc.default: Read complete after 0s [id=vpc-052a1ecb0b8764b97][0m
[0m[1maws_security_group.db: Refreshing state... [id=sg-01206304fe8ea2a3c][0m
[0m[1maws_db_instance.main: Refreshing state... [id=db-CFYLENJFDJ7UDAR3Z3VBC4LKE4][0m
[0m[1mdata.aws_iam_policy_document.scraper: Reading...[0m[0m
[0m[1mdata.aws_iam_policy_document.scraper: Read complete after 0s [id=1416984889][0m
[0m[1maws_iam_policy.scraper: Refreshing state... [id=arn:aws:iam::207567767039:policy/cc-nevada-permit-policy-prod][0m
[0m[1maws_iam_role_policy_attachment.scraper: Refreshing state... [id=cc-nevada-permit-irsa-prod-20250624194916850600000001][0m
[0m[1maws_secretsmanager_secret_version.db: Refreshing state... [id=arn:aws:secretsmanager:us-west-2:207567767039:secret:cc-nevada-permit-db-prod-Y2BBDG|terraform-20250624200501818300000001][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
  [33m~[0m update in-place[0m

Terraform will perform the following actions:

[1m  # aws_iam_policy.sns_to_slack_lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "sns_to_slack_lambda" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "sns-to-slack-lambda-policy"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:logs:*:*:*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "secretsmanager:GetSecretValue",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # aws_iam_role.scraper[0m will be updated in-place
[0m  [33m~[0m[0m resource "aws_iam_role" "scraper" {
      [33m~[0m[0m assume_role_policy    = jsonencode(
          [33m~[0m[0m {
              [33m~[0m[0m Statement = [
                  [33m~[0m[0m {
                      [33m~[0m[0m Condition = {
                          [33m~[0m[0m StringEquals = {
                              [32m+[0m[0m "https://oidc.eks.us-west-2.amazonaws.com/id/C0F23AD6C61A174278A5A674648A08A4:sub" = "system:serviceaccount:default:scraper"
                              [31m-[0m[0m "oidc.eks.us-west-2.amazonaws.com/id/EXAMPLED539D4633E53DE1B716D3041E:sub"         = "system:serviceaccount:default:scraper"
                            }
                        }
                      [33m~[0m[0m Principal = {
                          [33m~[0m[0m Federated = "arn:aws:iam::123456789012:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/EXAMPLED539D4633E53DE1B716D3041E" [33m->[0m[0m "207567767039207567767039"
                        }
                        [90m# (2 unchanged attributes hidden)[0m[0m
                    },
                ]
                [90m# (1 unchanged attribute hidden)[0m[0m
            }
        )
        id                    = "cc-nevada-permit-irsa-prod"
        name                  = "cc-nevada-permit-irsa-prod"
        tags                  = {}
        [90m# (11 unchanged attributes hidden)[0m[0m
    }

[1m  # aws_iam_role.sns_to_slack_lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "sns_to_slack_lambda" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "sns-to-slack-lambda-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # aws_iam_role_policy_attachment.sns_to_slack_lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "sns_to_slack_lambda" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "sns-to-slack-lambda-role"
    }

[1m  # aws_kms_key.secrets[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "secrets" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m deletion_window_in_days            = 7
      [32m+[0m[0m description                        = "KMS key for encrypting secrets (Slack webhook, etc.)"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = (known after apply)
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m region                             = "us-west-2"
      [32m+[0m[0m rotation_period_in_days            = (known after apply)
      [32m+[0m[0m tags_all                           = (known after apply)
    }

[1m  # aws_lambda_function.sns_to_slack[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "sns_to_slack" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "../lambda/sns_to_slack.zip"
      [32m+[0m[0m function_name                  = "sns-to-slack"
      [32m+[0m[0m handler                        = "lambda_function.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m region                         = "us-west-2"
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.11"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = (known after apply)
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = (known after apply)
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "AWS_REGION"        = "us-west-2"
              [32m+[0m[0m "SLACK_SECRET_NAME" = "slack-webhook-url"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)
    }

[1m  # aws_lambda_permission.allow_sns[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_permission" "allow_sns" {
      [32m+[0m[0m action              = "lambda:InvokeFunction"
      [32m+[0m[0m function_name       = "sns-to-slack"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m principal           = "sns.amazonaws.com"
      [32m+[0m[0m region              = "us-west-2"
      [32m+[0m[0m source_arn          = "arn:aws:sns:us-west-2:207567767039:cc-nevada-permit-alerts-prod"
      [32m+[0m[0m statement_id        = "AllowExecutionFromSNS"
      [32m+[0m[0m statement_id_prefix = (known after apply)
    }

[1m  # aws_secretsmanager_secret.slack_webhook[0m will be created
[0m  [32m+[0m[0m resource "aws_secretsmanager_secret" "slack_webhook" {
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m force_overwrite_replica_secret = false
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m kms_key_id                     = (known after apply)
      [32m+[0m[0m name                           = "slack-webhook-url"
      [32m+[0m[0m name_prefix                    = (known after apply)
      [32m+[0m[0m policy                         = (known after apply)
      [32m+[0m[0m recovery_window_in_days        = 30
      [32m+[0m[0m region                         = "us-west-2"
      [32m+[0m[0m tags_all                       = (known after apply)

      [32m+[0m[0m replica (known after apply)
    }

[1m  # aws_sns_topic_subscription.slack_lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_sns_topic_subscription" "slack_lambda" {
      [32m+[0m[0m arn                             = (known after apply)
      [32m+[0m[0m confirmation_timeout_in_minutes = 1
      [32m+[0m[0m confirmation_was_authenticated  = (known after apply)
      [32m+[0m[0m endpoint                        = (known after apply)
      [32m+[0m[0m endpoint_auto_confirms          = false
      [32m+[0m[0m filter_policy_scope             = (known after apply)
      [32m+[0m[0m id                              = (known after apply)
      [32m+[0m[0m owner_id                        = (known after apply)
      [32m+[0m[0m pending_confirmation            = (known after apply)
      [32m+[0m[0m protocol                        = "lambda"
      [32m+[0m[0m raw_message_delivery            = false
      [32m+[0m[0m region                          = "us-west-2"
      [32m+[0m[0m topic_arn                       = "arn:aws:sns:us-west-2:207567767039:cc-nevada-permit-alerts-prod"
    }

[1mPlan:[0m 8 to add, 1 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m kms_secrets_arn           = (known after apply)
  [32m+[0m[0m slack_webhook_secret_arn  = (known after apply)
[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
[INFO] Running terraform apply...
[0m[1maws_iam_policy.sns_to_slack_lambda: Creating...[0m[0m
[0m[1maws_iam_role.sns_to_slack_lambda: Creating...[0m[0m
[0m[1maws_kms_key.secrets: Creating...[0m[0m
[0m[1maws_iam_role.scraper: Modifying... [id=cc-nevada-permit-irsa-prod][0m[0m
[0m[1maws_iam_policy.sns_to_slack_lambda: Creation complete after 1s [id=arn:aws:iam::207567767039:policy/sns-to-slack-lambda-policy][0m
[0m[1maws_iam_role.sns_to_slack_lambda: Creation complete after 1s [id=sns-to-slack-lambda-role][0m
[0m[1maws_iam_role_policy_attachment.sns_to_slack_lambda: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.sns_to_slack_lambda: Creation complete after 0s [id=sns-to-slack-lambda-role-20250624223458977400000001][0m
[0m[1maws_kms_key.secrets: Creation complete after 5s [id=46ab90a1-9f65-4e16-baa3-7868cf229029][0m
[0m[1maws_secretsmanager_secret.slack_webhook: Creating...[0m[0m
[0m[1maws_secretsmanager_secret.slack_webhook: Creation complete after 0s [id=arn:aws:secretsmanager:us-west-2:207567767039:secret:slack-webhook-url-uczEza][0m
[0m[1maws_lambda_function.sns_to_slack: Creating...[0m[0m
[31mâ•·[0m[0m
[31mâ”‚[0m [0m[1m[31mError: [0m[0m[1mupdating IAM Role (cc-nevada-permit-irsa-prod) assume role policy: operation error IAM: UpdateAssumeRolePolicy, https response error StatusCode: 400, RequestID: cfb0bb2e-b183-4054-9c08-562f2653bf2c, MalformedPolicyDocument: Federated principals must be valid domain names or SAML metadata ARNs[0m
[31mâ”‚[0m [0m
[31mâ”‚[0m [0m[0m  with aws_iam_role.scraper,
[31mâ”‚[0m [0m  on main.tf line 83, in resource "aws_iam_role" "scraper":
[31mâ”‚[0m [0m  83: resource "aws_iam_role" "scraper" [4m{[0m[0m
[31mâ”‚[0m [0m
[31mâ•µ[0m[0m
[31mâ•·[0m[0m
[31mâ”‚[0m [0m[1m[31mError: [0m[0m[1mcreating Lambda Function (sns-to-slack): operation error Lambda: CreateFunction, https response error StatusCode: 400, RequestID: e2b66956-4a34-4175-99c2-787b375701c4, InvalidParameterValueException: Lambda was unable to configure your environment variables because the environment variables you have provided contains reserved keys that are currently not supported for modification. Reserved keys used in this request: AWS_REGION[0m
[31mâ”‚[0m [0m
[31mâ”‚[0m [0m[0m  with aws_lambda_function.sns_to_slack,
[31mâ”‚[0m [0m  on main.tf line 250, in resource "aws_lambda_function" "sns_to_slack":
[31mâ”‚[0m [0m 250: resource "aws_lambda_function" "sns_to_slack" [4m{[0m[0m
[31mâ”‚[0m [0m
[31mâ•µ[0m[0m
[INFO] Starting full deployment and monitoring verification...
[INFO] OIDC Provider URL: https://oidc.eks.us-west-2.amazonaws.com/id/C0F23AD6C61A174278A5A674648A08A4
[INFO] Listing OIDC provider ARNs...
[INFO] OIDC Provider ARNs: arn:aws:iam::207567767039:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/C0F23AD6C61A174278A5A674648A08A4	arn:aws:iam::207567767039:oidc-provider/token.actions.githubusercontent.com
[INFO] Running terraform init...
[0m[1mInitializing the backend...[0m
[0m[1mInitializing provider plugins...[0m
- Reusing previous version of hashicorp/random from the dependency lock file
- Reusing previous version of hashicorp/archive from the dependency lock file
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/random v3.7.2
- Using previously-installed hashicorp/archive v2.7.1
- Using previously-installed hashicorp/aws v6.0.0

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
[INFO] Running terraform plan...
[0m[1mvar.eks_oidc_provider_arn[0m
  EKS OIDC provider ARN

  [1mEnter a value:[0m [0m
[0m[1mvar.eks_oidc_provider_url[0m
  EKS OIDC provider URL

  [1mEnter a value:[0m [0m
[0m[1mrandom_password.db_password: Refreshing state... [id=none][0m
[0m[1mdata.archive_file.sns_to_slack_lambda_zip: Reading...[0m[0m
[0m[1mdata.archive_file.sns_to_slack_lambda_zip: Read complete after 0s [id=3491934356510047cd083383ceccc26cbca46ce7][0m
[0m[1mdata.aws_vpc.default: Reading...[0m[0m
[0m[1maws_cloudwatch_log_group.scraper: Refreshing state... [id=/aws/cc-nevada-permit-scraper/prod][0m
[0m[1mdata.aws_iam_policy_document.irsa: Reading...[0m[0m
[0m[1maws_iam_role.sns_to_slack_lambda: Refreshing state... [id=sns-to-slack-lambda-role][0m
[0m[1maws_iam_policy.sns_to_slack_lambda: Refreshing state... [id=arn:aws:iam::207567767039:policy/sns-to-slack-lambda-policy][0m
[0m[1maws_secretsmanager_secret.db: Refreshing state... [id=arn:aws:secretsmanager:us-west-2:207567767039:secret:cc-nevada-permit-db-prod-Y2BBDG][0m
[0m[1maws_sns_topic.alerts: Refreshing state... [id=arn:aws:sns:us-west-2:207567767039:cc-nevada-permit-alerts-prod][0m
[0m[1maws_kms_key.secrets: Refreshing state... [id=46ab90a1-9f65-4e16-baa3-7868cf229029][0m
[0m[1maws_s3_bucket.export: Refreshing state... [id=cc-nevada-permit-export-prod][0m
[0m[1mdata.aws_iam_policy_document.irsa: Read complete after 0s [id=81643911][0m
[0m[1maws_iam_role.scraper: Refreshing state... [id=cc-nevada-permit-irsa-prod][0m
[0m[1maws_cloudwatch_metric_alarm.scrape_failure: Refreshing state... [id=cc-nevada-permit-scrape-failure-prod][0m
[0m[1maws_cloudwatch_metric_alarm.scrape_error_count: Refreshing state... [id=cc-nevada-permit-scrape-error-high-prod][0m
[0m[1maws_secretsmanager_secret.slack_webhook: Refreshing state... [id=arn:aws:secretsmanager:us-west-2:207567767039:secret:slack-webhook-url-uczEza][0m
[0m[1maws_iam_role_policy_attachment.sns_to_slack_lambda: Refreshing state... [id=sns-to-slack-lambda-role-20250624223458977400000001][0m
[0m[1mdata.aws_vpc.default: Read complete after 1s [id=vpc-052a1ecb0b8764b97][0m
[0m[1maws_security_group.db: Refreshing state... [id=sg-01206304fe8ea2a3c][0m
[0m[1mdata.aws_iam_policy_document.scraper: Reading...[0m[0m
[0m[1mdata.aws_iam_policy_document.scraper: Read complete after 0s [id=1416984889][0m
[0m[1maws_iam_policy.scraper: Refreshing state... [id=arn:aws:iam::207567767039:policy/cc-nevada-permit-policy-prod][0m
[0m[1maws_db_instance.main: Refreshing state... [id=db-CFYLENJFDJ7UDAR3Z3VBC4LKE4][0m
[0m[1maws_iam_role_policy_attachment.scraper: Refreshing state... [id=cc-nevada-permit-irsa-prod-20250624194916850600000001][0m
[0m[1maws_secretsmanager_secret_version.db: Refreshing state... [id=arn:aws:secretsmanager:us-west-2:207567767039:secret:cc-nevada-permit-db-prod-Y2BBDG|terraform-20250624200501818300000001][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
  [33m~[0m update in-place[0m

Terraform will perform the following actions:

[1m  # aws_iam_role.scraper[0m will be updated in-place
[0m  [33m~[0m[0m resource "aws_iam_role" "scraper" {
      [33m~[0m[0m assume_role_policy    = jsonencode(
          [33m~[0m[0m {
              [33m~[0m[0m Statement = [
                  [33m~[0m[0m {
                      [33m~[0m[0m Condition = {
                          [33m~[0m[0m StringEquals = {
                              [32m+[0m[0m "https://oidc.eks.us-west-2.amazonaws.com/id/C0F23AD6C61A174278A5A674648A08A4:sub" = "system:serviceaccount:default:scraper"
                              [31m-[0m[0m "oidc.eks.us-west-2.amazonaws.com/id/EXAMPLED539D4633E53DE1B716D3041E:sub"         = "system:serviceaccount:default:scraper"
                            }
                        }
                      [33m~[0m[0m Principal = {
                          [33m~[0m[0m Federated = "arn:aws:iam::123456789012:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/EXAMPLED539D4633E53DE1B716D3041E" [33m->[0m[0m "  arn:aws:iam::207567767039:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/C0F23AD6C61A174278A5A674648A08A4  arn:aws:iam::207567767039:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/C0F23AD6C61A174278A5A674648A08A4"
                        }
                        [90m# (2 unchanged attributes hidden)[0m[0m
                    },
                ]
                [90m# (1 unchanged attribute hidden)[0m[0m
            }
        )
        id                    = "cc-nevada-permit-irsa-prod"
        name                  = "cc-nevada-permit-irsa-prod"
        tags                  = {}
        [90m# (11 unchanged attributes hidden)[0m[0m
    }

[1m  # aws_lambda_function.sns_to_slack[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "sns_to_slack" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "../lambda/sns_to_slack.zip"
      [32m+[0m[0m function_name                  = "sns-to-slack"
      [32m+[0m[0m handler                        = "lambda_function.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m region                         = "us-west-2"
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = "arn:aws:iam::207567767039:role/sns-to-slack-lambda-role"
      [32m+[0m[0m runtime                        = "python3.11"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = (known after apply)
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = (known after apply)
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "SLACK_SECRET_NAME" = "slack-webhook-url"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)
    }

[1m  # aws_lambda_permission.allow_sns[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_permission" "allow_sns" {
      [32m+[0m[0m action              = "lambda:InvokeFunction"
      [32m+[0m[0m function_name       = "sns-to-slack"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m principal           = "sns.amazonaws.com"
      [32m+[0m[0m region              = "us-west-2"
      [32m+[0m[0m source_arn          = "arn:aws:sns:us-west-2:207567767039:cc-nevada-permit-alerts-prod"
      [32m+[0m[0m statement_id        = "AllowExecutionFromSNS"
      [32m+[0m[0m statement_id_prefix = (known after apply)
    }

[1m  # aws_sns_topic_subscription.slack_lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_sns_topic_subscription" "slack_lambda" {
      [32m+[0m[0m arn                             = (known after apply)
      [32m+[0m[0m confirmation_timeout_in_minutes = 1
      [32m+[0m[0m confirmation_was_authenticated  = (known after apply)
      [32m+[0m[0m endpoint                        = (known after apply)
      [32m+[0m[0m endpoint_auto_confirms          = false
      [32m+[0m[0m filter_policy_scope             = (known after apply)
      [32m+[0m[0m id                              = (known after apply)
      [32m+[0m[0m owner_id                        = (known after apply)
      [32m+[0m[0m pending_confirmation            = (known after apply)
      [32m+[0m[0m protocol                        = "lambda"
      [32m+[0m[0m raw_message_delivery            = false
      [32m+[0m[0m region                          = "us-west-2"
      [32m+[0m[0m topic_arn                       = "arn:aws:sns:us-west-2:207567767039:cc-nevada-permit-alerts-prod"
    }

[1mPlan:[0m 3 to add, 1 to change, 0 to destroy.
[0m[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
[INFO] Running terraform apply...
[0m[1maws_iam_role.scraper: Modifying... [id=cc-nevada-permit-irsa-prod][0m[0m
[0m[1maws_lambda_function.sns_to_slack: Creating...[0m[0m
[0m[1maws_lambda_function.sns_to_slack: Creation complete after 6s [id=sns-to-slack][0m
[0m[1maws_lambda_permission.allow_sns: Creating...[0m[0m
[0m[1maws_sns_topic_subscription.slack_lambda: Creating...[0m[0m
[0m[1maws_lambda_permission.allow_sns: Creation complete after 0s [id=AllowExecutionFromSNS][0m
[0m[1maws_sns_topic_subscription.slack_lambda: Creation complete after 1s [id=arn:aws:sns:us-west-2:207567767039:cc-nevada-permit-alerts-prod:59522c8f-b6c5-4760-851f-2d8f1b534b5c][0m
[31mâ•·[0m[0m
[31mâ”‚[0m [0m[1m[31mError: [0m[0m[1mupdating IAM Role (cc-nevada-permit-irsa-prod) assume role policy: operation error IAM: UpdateAssumeRolePolicy, https response error StatusCode: 400, RequestID: 646b697b-3037-462c-ae94-4fe40ca019f9, MalformedPolicyDocument: Federated principals must be valid domain names or SAML metadata ARNs[0m
[31mâ”‚[0m [0m
[31mâ”‚[0m [0m[0m  with aws_iam_role.scraper,
[31mâ”‚[0m [0m  on main.tf line 83, in resource "aws_iam_role" "scraper":
[31mâ”‚[0m [0m  83: resource "aws_iam_role" "scraper" [4m{[0m[0m
[31mâ”‚[0m [0m
[31mâ•µ[0m[0m
[INFO] Writing OIDC provider values to terraform/terraform.tfvars...
eks_oidc_provider_url = "https://oidc.eks.us-west-2.amazonaws.com/id/C0F23AD6C61A174278A5A674648A08A4"
eks_oidc_provider_arn = "arn:aws:iam::207567767039:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/C0F23AD6C61A174278A5A674648A08A4"
[INFO] Starting full deployment and monitoring verification...
[INFO] OIDC Provider URL: https://oidc.eks.us-west-2.amazonaws.com/id/C0F23AD6C61A174278A5A674648A08A4
[INFO] OIDC Provider ARN: arn:aws:iam::207567767039:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/C0F23AD6C61A174278A5A674648A08A4
[INFO] Listing OIDC provider ARNs...
[INFO] OIDC Provider ARNs: arn:aws:iam::207567767039:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/C0F23AD6C61A174278A5A674648A08A4	arn:aws:iam::207567767039:oidc-provider/token.actions.githubusercontent.com
[INFO] Running terraform init...
[0m[1mInitializing the backend...[0m
[0m[1mInitializing provider plugins...[0m
- Reusing previous version of hashicorp/random from the dependency lock file
- Reusing previous version of hashicorp/archive from the dependency lock file
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v6.0.0
- Using previously-installed hashicorp/random v3.7.2
- Using previously-installed hashicorp/archive v2.7.1

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
[INFO] Running terraform plan...
[0m[1mrandom_password.db_password: Refreshing state... [id=none][0m
[0m[1mdata.archive_file.sns_to_slack_lambda_zip: Reading...[0m[0m
[0m[1mdata.archive_file.sns_to_slack_lambda_zip: Read complete after 0s [id=3491934356510047cd083383ceccc26cbca46ce7][0m
[0m[1mdata.aws_iam_policy_document.irsa: Reading...[0m[0m
[0m[1maws_cloudwatch_log_group.scraper: Refreshing state... [id=/aws/cc-nevada-permit-scraper/prod][0m
[0m[1maws_iam_role.sns_to_slack_lambda: Refreshing state... [id=sns-to-slack-lambda-role][0m
[0m[1maws_iam_policy.sns_to_slack_lambda: Refreshing state... [id=arn:aws:iam::207567767039:policy/sns-to-slack-lambda-policy][0m
[0m[1mdata.aws_vpc.default: Reading...[0m[0m
[0m[1maws_sns_topic.alerts: Refreshing state... [id=arn:aws:sns:us-west-2:207567767039:cc-nevada-permit-alerts-prod][0m
[0m[1maws_kms_key.secrets: Refreshing state... [id=46ab90a1-9f65-4e16-baa3-7868cf229029][0m
[0m[1maws_secretsmanager_secret.db: Refreshing state... [id=arn:aws:secretsmanager:us-west-2:207567767039:secret:cc-nevada-permit-db-prod-Y2BBDG][0m
[0m[1mdata.aws_iam_policy_document.irsa: Read complete after 0s [id=3747110658][0m
[0m[1maws_s3_bucket.export: Refreshing state... [id=cc-nevada-permit-export-prod][0m
[0m[1maws_iam_role.scraper: Refreshing state... [id=cc-nevada-permit-irsa-prod][0m
[0m[1maws_cloudwatch_metric_alarm.scrape_error_count: Refreshing state... [id=cc-nevada-permit-scrape-error-high-prod][0m
[0m[1maws_cloudwatch_metric_alarm.scrape_failure: Refreshing state... [id=cc-nevada-permit-scrape-failure-prod][0m
[0m[1maws_secretsmanager_secret.slack_webhook: Refreshing state... [id=arn:aws:secretsmanager:us-west-2:207567767039:secret:slack-webhook-url-uczEza][0m
[0m[1maws_iam_role_policy_attachment.sns_to_slack_lambda: Refreshing state... [id=sns-to-slack-lambda-role-20250624223458977400000001][0m
[0m[1maws_lambda_function.sns_to_slack: Refreshing state... [id=sns-to-slack][0m
[0m[1mdata.aws_vpc.default: Read complete after 1s [id=vpc-052a1ecb0b8764b97][0m
[0m[1maws_security_group.db: Refreshing state... [id=sg-01206304fe8ea2a3c][0m
[0m[1mdata.aws_iam_policy_document.scraper: Reading...[0m[0m
[0m[1mdata.aws_iam_policy_document.scraper: Read complete after 0s [id=1416984889][0m
[0m[1maws_iam_policy.scraper: Refreshing state... [id=arn:aws:iam::207567767039:policy/cc-nevada-permit-policy-prod][0m
[0m[1maws_db_instance.main: Refreshing state... [id=db-CFYLENJFDJ7UDAR3Z3VBC4LKE4][0m
[0m[1maws_lambda_permission.allow_sns: Refreshing state... [id=AllowExecutionFromSNS][0m
[0m[1maws_sns_topic_subscription.slack_lambda: Refreshing state... [id=arn:aws:sns:us-west-2:207567767039:cc-nevada-permit-alerts-prod:59522c8f-b6c5-4760-851f-2d8f1b534b5c][0m
[0m[1maws_iam_role_policy_attachment.scraper: Refreshing state... [id=cc-nevada-permit-irsa-prod-20250624194916850600000001][0m
[0m[1maws_secretsmanager_secret_version.db: Refreshing state... [id=arn:aws:secretsmanager:us-west-2:207567767039:secret:cc-nevada-permit-db-prod-Y2BBDG|terraform-20250624200501818300000001][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [33m~[0m update in-place[0m

Terraform will perform the following actions:

[1m  # aws_iam_role.scraper[0m will be updated in-place
[0m  [33m~[0m[0m resource "aws_iam_role" "scraper" {
      [33m~[0m[0m assume_role_policy    = jsonencode(
          [33m~[0m[0m {
              [33m~[0m[0m Statement = [
                  [33m~[0m[0m {
                      [33m~[0m[0m Condition = {
                          [33m~[0m[0m StringEquals = {
                              [32m+[0m[0m "https://oidc.eks.us-west-2.amazonaws.com/id/C0F23AD6C61A174278A5A674648A08A4:sub" = "system:serviceaccount:default:scraper"
                              [31m-[0m[0m "oidc.eks.us-west-2.amazonaws.com/id/EXAMPLED539D4633E53DE1B716D3041E:sub"         = "system:serviceaccount:default:scraper"
                            }
                        }
                      [33m~[0m[0m Principal = {
                          [33m~[0m[0m Federated = "arn:aws:iam::123456789012:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/EXAMPLED539D4633E53DE1B716D3041E" [33m->[0m[0m "arn:aws:iam::207567767039:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/C0F23AD6C61A174278A5A674648A08A4"
                        }
                        [90m# (2 unchanged attributes hidden)[0m[0m
                    },
                ]
                [90m# (1 unchanged attribute hidden)[0m[0m
            }
        )
        id                    = "cc-nevada-permit-irsa-prod"
        name                  = "cc-nevada-permit-irsa-prod"
        tags                  = {}
        [90m# (11 unchanged attributes hidden)[0m[0m
    }

[1mPlan:[0m 0 to add, 1 to change, 0 to destroy.
[0m[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
[INFO] Running terraform apply...
[0m[1maws_iam_role.scraper: Modifying... [id=cc-nevada-permit-irsa-prod][0m[0m
[0m[1maws_iam_role.scraper: Modifications complete after 1s [id=cc-nevada-permit-irsa-prod][0m
[0m[1m[32m
Apply complete! Resources: 0 added, 1 changed, 0 destroyed.
[0m[0m[1m[32m
Outputs:

[0mcloudwatch_log_group_name = "/aws/cc-nevada-permit-scraper/prod"
irsa_role_arn = "arn:aws:iam::207567767039:role/cc-nevada-permit-irsa-prod"
kms_secrets_arn = "arn:aws:kms:us-west-2:207567767039:key/46ab90a1-9f65-4e16-baa3-7868cf229029"
rds_endpoint = "cc-nevada-permit-db-prod.cf26eq2ykwf8.us-west-2.rds.amazonaws.com"
s3_export_bucket = "cc-nevada-permit-export-prod"
secretsmanager_arn = "arn:aws:secretsmanager:us-west-2:207567767039:secret:cc-nevada-permit-db-prod-Y2BBDG"
slack_webhook_secret_arn = "arn:aws:secretsmanager:us-west-2:207567767039:secret:slack-webhook-url-uczEza"
sns_alerts_topic_arn = "arn:aws:sns:us-west-2:207567767039:cc-nevada-permit-alerts-prod"
[INFO] Terraform apply complete.
[WARN] No Kubernetes manifests found in scraper/k8s. Skipping k8s deployment.
[INFO] Kubernetes deployment step complete.
[ERROR] CloudWatch log group /aws/eks/scraper not found!
[ERROR] SNS topic scraper-alerts not found!
[SUCCESS] Deployment and monitoring verification complete. Check CloudWatch and SNS for test events.
[INFO] Writing OIDC provider values to terraform/terraform.tfvars...
eks_oidc_provider_url = "https://oidc.eks.us-west-2.amazonaws.com/id/C0F23AD6C61A174278A5A674648A08A4"
eks_oidc_provider_arn = "arn:aws:iam::207567767039:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/C0F23AD6C61A174278A5A674648A08A4"
[INFO] Starting full deployment and monitoring verification...
[INFO] OIDC Provider URL: https://oidc.eks.us-west-2.amazonaws.com/id/C0F23AD6C61A174278A5A674648A08A4
[INFO] OIDC Provider ARN: arn:aws:iam::207567767039:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/C0F23AD6C61A174278A5A674648A08A4
[INFO] Listing OIDC provider ARNs...
[INFO] OIDC Provider ARNs: arn:aws:iam::207567767039:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/C0F23AD6C61A174278A5A674648A08A4	arn:aws:iam::207567767039:oidc-provider/token.actions.githubusercontent.com
[INFO] Running terraform init...
[0m[1mInitializing the backend...[0m
[0m[1mInitializing provider plugins...[0m
- Reusing previous version of hashicorp/aws from the dependency lock file
- Reusing previous version of hashicorp/random from the dependency lock file
- Reusing previous version of hashicorp/archive from the dependency lock file
- Using previously-installed hashicorp/aws v6.0.0
- Using previously-installed hashicorp/random v3.7.2
- Using previously-installed hashicorp/archive v2.7.1

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
[INFO] Running terraform plan...
[0m[1mdata.archive_file.sns_to_slack_lambda_zip: Reading...[0m[0m
[0m[1mrandom_password.db_password: Refreshing state... [id=none][0m
[0m[1mdata.archive_file.sns_to_slack_lambda_zip: Read complete after 0s [id=3491934356510047cd083383ceccc26cbca46ce7][0m
[0m[1mdata.aws_iam_policy_document.irsa: Reading...[0m[0m
[0m[1mdata.aws_vpc.default: Reading...[0m[0m
[0m[1maws_secretsmanager_secret.db: Refreshing state... [id=arn:aws:secretsmanager:us-west-2:207567767039:secret:cc-nevada-permit-db-prod-Y2BBDG][0m
[0m[1maws_kms_key.secrets: Refreshing state... [id=46ab90a1-9f65-4e16-baa3-7868cf229029][0m
[0m[1maws_iam_policy.sns_to_slack_lambda: Refreshing state... [id=arn:aws:iam::207567767039:policy/sns-to-slack-lambda-policy][0m
[0m[1maws_cloudwatch_log_group.scraper: Refreshing state... [id=/aws/cc-nevada-permit-scraper/prod][0m
[0m[1maws_iam_role.sns_to_slack_lambda: Refreshing state... [id=sns-to-slack-lambda-role][0m
[0m[1maws_sns_topic.alerts: Refreshing state... [id=arn:aws:sns:us-west-2:207567767039:cc-nevada-permit-alerts-prod][0m
[0m[1maws_s3_bucket.export: Refreshing state... [id=cc-nevada-permit-export-prod][0m
[0m[1mdata.aws_iam_policy_document.irsa: Read complete after 0s [id=3747110658][0m
[0m[1maws_iam_role.scraper: Refreshing state... [id=cc-nevada-permit-irsa-prod][0m
[0m[1maws_cloudwatch_metric_alarm.scrape_error_count: Refreshing state... [id=cc-nevada-permit-scrape-error-high-prod][0m
[0m[1maws_cloudwatch_metric_alarm.scrape_failure: Refreshing state... [id=cc-nevada-permit-scrape-failure-prod][0m
[0m[1maws_secretsmanager_secret.slack_webhook: Refreshing state... [id=arn:aws:secretsmanager:us-west-2:207567767039:secret:slack-webhook-url-uczEza][0m
[0m[1maws_iam_role_policy_attachment.sns_to_slack_lambda: Refreshing state... [id=sns-to-slack-lambda-role-20250624223458977400000001][0m
[0m[1maws_lambda_function.sns_to_slack: Refreshing state... [id=sns-to-slack][0m
[0m[1mdata.aws_vpc.default: Read complete after 0s [id=vpc-052a1ecb0b8764b97][0m
[0m[1maws_security_group.db: Refreshing state... [id=sg-01206304fe8ea2a3c][0m
[0m[1maws_lambda_permission.allow_sns: Refreshing state... [id=AllowExecutionFromSNS][0m
[0m[1maws_sns_topic_subscription.slack_lambda: Refreshing state... [id=arn:aws:sns:us-west-2:207567767039:cc-nevada-permit-alerts-prod:59522c8f-b6c5-4760-851f-2d8f1b534b5c][0m
[0m[1maws_db_instance.main: Refreshing state... [id=db-CFYLENJFDJ7UDAR3Z3VBC4LKE4][0m
[0m[1mdata.aws_iam_policy_document.scraper: Reading...[0m[0m
[0m[1mdata.aws_iam_policy_document.scraper: Read complete after 0s [id=1416984889][0m
[0m[1maws_iam_policy.scraper: Refreshing state... [id=arn:aws:iam::207567767039:policy/cc-nevada-permit-policy-prod][0m
[0m[1maws_iam_role_policy_attachment.scraper: Refreshing state... [id=cc-nevada-permit-irsa-prod-20250624194916850600000001][0m
[0m[1maws_secretsmanager_secret_version.db: Refreshing state... [id=arn:aws:secretsmanager:us-west-2:207567767039:secret:cc-nevada-permit-db-prod-Y2BBDG|terraform-20250624200501818300000001][0m

[0m[1m[32mNo changes.[0m[1m Your infrastructure matches the configuration.[0m

[0mTerraform has compared your real infrastructure against your configuration
and found no differences, so no changes are needed.
[INFO] Running terraform apply...
[0m[1m[32m
Apply complete! Resources: 0 added, 0 changed, 0 destroyed.
[0m[0m[1m[32m
Outputs:

[0mcloudwatch_log_group_name = "/aws/cc-nevada-permit-scraper/prod"
irsa_role_arn = "arn:aws:iam::207567767039:role/cc-nevada-permit-irsa-prod"
kms_secrets_arn = "arn:aws:kms:us-west-2:207567767039:key/46ab90a1-9f65-4e16-baa3-7868cf229029"
rds_endpoint = "cc-nevada-permit-db-prod.cf26eq2ykwf8.us-west-2.rds.amazonaws.com"
s3_export_bucket = "cc-nevada-permit-export-prod"
secretsmanager_arn = "arn:aws:secretsmanager:us-west-2:207567767039:secret:cc-nevada-permit-db-prod-Y2BBDG"
slack_webhook_secret_arn = "arn:aws:secretsmanager:us-west-2:207567767039:secret:slack-webhook-url-uczEza"
sns_alerts_topic_arn = "arn:aws:sns:us-west-2:207567767039:cc-nevada-permit-alerts-prod"
[INFO] Fetching Terraform outputs...
[INFO] Terraform apply complete.
[INFO] Deploying Kubernetes manifests from scraper/k8s...
error validating "scraper/k8s/scraper-deployment.yaml": error validating data: failed to download openapi: Get "http://localhost:8080/openapi/v2?timeout=32s": dial tcp [::1]:8080: connect: connection refused; if you choose to ignore these errors, turn validation off with --validate=false
error validating "scraper/k8s/scraper-irsa-serviceaccount.yaml": error validating data: failed to download openapi: Get "http://localhost:8080/openapi/v2?timeout=32s": dial tcp [::1]:8080: connect: connection refused; if you choose to ignore these errors, turn validation off with --validate=false
